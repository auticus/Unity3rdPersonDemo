using System;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Unity3rdPersonDemo.Input
{
    public class InputReader : MonoBehaviour, Controls.IPlayerActions
    {
        public Vector2 MovementValue { get; private set; }

        public event Action OnInputJump;
        public event Action OnInputDodge;
        public event Action OnTargetingClicked;

        private Controls _controls;

        private void Start()
        {
            _controls = new Controls();
            _controls.Player.SetCallbacks(this);

            _controls.Player.Enable();
        }

        private void OnDestroy()
        {
            _controls.Player.Disable();
        }

        public void OnJump(InputAction.CallbackContext context)
        {
            if (!context.performed) return;
            OnInputJump?.Invoke();
        }

        public void OnDodge(InputAction.CallbackContext context)
        {
            if (!context.performed) return;
            OnInputDodge?.Invoke();
        }

        public void OnMovement(InputAction.CallbackContext context)
        {
            MovementValue = context.action.ReadValue<Vector2>();
        }

        public void OnCamera(InputAction.CallbackContext context)
        {
            //Cinemachine is doing the work, we just have to have the empty  method here to adhere to the interface 
            //the issue with autogenerated code...
        }

        public void OnTargeting(InputAction.CallbackContext context)
        {
            if (!context.performed) return;
            OnTargetingClicked?.Invoke();
        }
    }
}
